{
  "openapi": "3.0.0",
  "paths": {
    "/": {
      "get": {
        "description": "Возвращает базовую информацию о Georgian Restaurant API",
        "operationId": "AppController_getHello",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Информация о приложении успешно получена",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Hello Georgian Restaurant API!"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "version": {
                      "type": "string",
                      "example": "1.0.0"
                    },
                    "database": {
                      "type": "string",
                      "example": "PostgreSQL gr_db2"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Получить информацию о приложении",
        "tags": [
          "health"
        ]
      }
    },
    "/health": {
      "get": {
        "description": "Возвращает статус работоспособности Georgian Restaurant API",
        "operationId": "HealthController_getHealth",
        "parameters": [],
        "responses": {
          "200": {
            "description": "API работает нормально",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "OK"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "service": {
                      "type": "string",
                      "example": "Georgian Restaurant API"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Проверка работоспособности API",
        "tags": [
          "health"
        ]
      }
    },
    "/health/db": {
      "get": {
        "description": "Проверяет состояние подключения к PostgreSQL базе данных",
        "operationId": "HealthController_getDatabaseHealth",
        "parameters": [],
        "responses": {
          "200": {
            "description": "База данных доступна",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "OK"
                    },
                    "database": {
                      "type": "string",
                      "example": "gr_db2"
                    },
                    "connected": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Проверка подключения к базе данных",
        "tags": [
          "health"
        ]
      }
    },
    "/health/db/info": {
      "get": {
        "description": "Возвращает версию PostgreSQL, имя БД и пользователя",
        "operationId": "HealthController_getDatabaseInfo",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Информация о базе данных получена",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "version": {
                      "type": "string",
                      "example": "PostgreSQL 14.9"
                    },
                    "database": {
                      "type": "string",
                      "example": "gr_db2"
                    },
                    "user": {
                      "type": "string",
                      "example": "restaurant_admin"
                    },
                    "connection_status": {
                      "type": "string",
                      "example": "active"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Получить подробную информацию о базе данных",
        "tags": [
          "health"
        ]
      }
    },
    "/audit": {
      "get": {
        "description": "Возвращает записи аудита с возможностью фильтрации по таблице, операции, пользователю и ID записи",
        "operationId": "AuditController_getAuditLogs",
        "parameters": [
          {
            "name": "table",
            "required": false,
            "in": "query",
            "description": "Имя таблицы для фильтрации",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "operation",
            "required": false,
            "in": "query",
            "description": "Тип операции (INSERT, UPDATE, DELETE)",
            "schema": {
              "enum": [
                "INSERT",
                "UPDATE",
                "DELETE"
              ],
              "type": "string"
            }
          },
          {
            "name": "user",
            "required": false,
            "in": "query",
            "description": "Пользователь, выполнивший операцию",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recordId",
            "required": false,
            "in": "query",
            "description": "ID измененной записи",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Лимит записей (по умолчанию 50)",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Записи аудита успешно получены"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить записи аудита с фильтрацией",
        "tags": [
          "audit"
        ]
      }
    },
    "/audit/recent": {
      "get": {
        "description": "Возвращает последние записи аудита в порядке убывания по времени",
        "operationId": "AuditController_getRecentAuditLogs",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Количество записей (по умолчанию 50)",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Последние записи аудита получены"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить последние записи аудита",
        "tags": [
          "audit"
        ]
      }
    },
    "/audit/history": {
      "get": {
        "operationId": "AuditController_getRecordHistory",
        "parameters": [
          {
            "name": "table",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recordId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "audit"
        ]
      }
    },
    "/audit/statistics": {
      "get": {
        "description": "Возвращает статистику операций аудита по таблицам и типам операций",
        "operationId": "AuditController_getStatistics",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Статистика аудита получена",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "operationStats": {
                      "type": "array",
                      "description": "Статистика по операциям"
                    },
                    "tableStats": {
                      "type": "array",
                      "description": "Статистика по таблицам"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить статистику аудита",
        "tags": [
          "audit"
        ]
      }
    },
    "/audit/recent-changes": {
      "get": {
        "operationId": "AuditController_getRecentChanges",
        "parameters": [
          {
            "name": "days",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "audit"
        ]
      }
    },
    "/audit/user-activity": {
      "get": {
        "operationId": "AuditController_getUserActivity",
        "parameters": [
          {
            "name": "username",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "tags": [
          "audit"
        ]
      }
    },
    "/auth/login": {
      "post": {
        "operationId": "AuthController_login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials"
          }
        },
        "summary": "User login",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/auth/register": {
      "post": {
        "operationId": "AuthController_register",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Пользователь успешно зарегистрирован. Необходимо войти через /auth/login",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Пользователь успешно зарегистрирован. Пожалуйста, войдите в систему."
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "user_id": {
                          "type": "string",
                          "example": "d5669069-0e13-4c97-a07d-381c12f37142"
                        },
                        "username": {
                          "type": "string",
                          "example": "new_user"
                        },
                        "email": {
                          "type": "string",
                          "example": "user@example.com"
                        },
                        "first_name": {
                          "type": "string",
                          "example": "Имя"
                        },
                        "last_name": {
                          "type": "string",
                          "example": "Фамилия"
                        },
                        "role": {
                          "type": "string",
                          "example": "user"
                        },
                        "role_id": {
                          "type": "number",
                          "example": 3
                        }
                      }
                    },
                    "created_at": {
                      "type": "string",
                      "example": "2025-10-19T20:15:30.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Validation failed"
          },
          "409": {
            "description": "Conflict - Username or email already exists"
          }
        },
        "summary": "User registration",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/auth/profile": {
      "get": {
        "operationId": "AuthController_getProfile",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Профиль пользователя успешно получен",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user_id": {
                      "type": "string",
                      "example": "d5669069-0e13-4c97-a07d-381c12f37142"
                    },
                    "username": {
                      "type": "string",
                      "example": "testuser123"
                    },
                    "email": {
                      "type": "string",
                      "example": "test@example.com"
                    },
                    "first_name": {
                      "type": "string",
                      "example": "John"
                    },
                    "last_name": {
                      "type": "string",
                      "example": "Doe"
                    },
                    "phone": {
                      "type": "string",
                      "example": "+995591234567",
                      "nullable": true
                    },
                    "role_id": {
                      "type": "number",
                      "example": 3
                    },
                    "role": {
                      "type": "string",
                      "example": "user"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "last_login": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "country": {
                      "type": "string",
                      "example": "Грузия",
                      "nullable": true
                    },
                    "city": {
                      "type": "string",
                      "example": "Тбилиси",
                      "nullable": true
                    },
                    "street_address": {
                      "type": "string",
                      "example": "ул. Руставели 15",
                      "nullable": true
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Пользователь не авторизован или токен недействителен"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получение профиля пользователя",
        "tags": [
          "Authentication"
        ]
      },
      "put": {
        "operationId": "AuthController_updateProfile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfileDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Профиль успешно обновлён",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "message": {
                      "type": "string",
                      "example": "Profile updated successfully"
                    },
                    "updated_user_id": {
                      "type": "string",
                      "example": "d5669069-0e13-4c97-a07d-381c12f37142"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Неверные данные или не указано ни одного поля для обновления"
          },
          "401": {
            "description": "Пользователь не авторизован"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Обновление профиля пользователя",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/auth/profile/password": {
      "post": {
        "operationId": "AuthController_changePassword",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Пароль успешно изменён",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "message": {
                      "type": "string",
                      "example": "Profile updated successfully"
                    },
                    "updated_user_id": {
                      "type": "string",
                      "example": "d5669069-0e13-4c97-a07d-381c12f37142"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Неверные данные пароля"
          },
          "401": {
            "description": "Текущий пароль неверный или пользователь не авторизован"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Смена пароля пользователя",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/auth/logout": {
      "post": {
        "operationId": "AuthController_logout",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Logout successful"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "User logout",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/menu-categories": {
      "get": {
        "description": "Возвращает список всех категорий меню, отсортированных по названию",
        "operationId": "MenuCategoriesController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Список категорий успешно получен",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MenuCategoryResponseDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Получить все категории меню",
        "tags": [
          "Menu Categories"
        ]
      },
      "post": {
        "description": "Создает новую категорию меню",
        "operationId": "MenuCategoriesController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMenuCategoryDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Категория успешно создана",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuCategoryResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Некорректные данные для создания категории"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Создать новую категорию",
        "tags": [
          "Menu Categories"
        ]
      }
    },
    "/menu-categories/{id}": {
      "get": {
        "description": "Возвращает детальную информацию о категории меню",
        "operationId": "MenuCategoriesController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Уникальный идентификатор категории",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Категория найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuCategoryResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Категория с указанным ID не найдена"
          }
        },
        "summary": "Получить категорию по ID",
        "tags": [
          "Menu Categories"
        ]
      },
      "patch": {
        "description": "Обновляет информацию о категории меню",
        "operationId": "MenuCategoriesController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Уникальный идентификатор категории",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMenuCategoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Категория успешно обновлена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuCategoryResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Некорректные данные для обновления категории"
          },
          "404": {
            "description": "Категория с указанным ID не найдена"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Обновить категорию",
        "tags": [
          "Menu Categories"
        ]
      },
      "delete": {
        "description": "Удаляет категорию меню",
        "operationId": "MenuCategoriesController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Уникальный идентификатор категории",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Категория успешно удалена"
          },
          "404": {
            "description": "Категория с указанным ID не найдена"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Удалить категорию",
        "tags": [
          "Menu Categories"
        ]
      }
    },
    "/menu": {
      "get": {
        "description": "Возвращает список блюд меню с поддержкой:\n    - Поиска по названию\n    - Фильтрации по категории, типу блюда, цене, времени приготовления, калориям\n    - Сортировки по различным полям\n    - Пагинации\n    Показываются только неудаленные блюда (is_deleted = false)",
        "operationId": "MenuController_findAll",
        "parameters": [
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Поиск по названию блюда",
            "schema": {
              "example": "хачапури",
              "type": "string"
            }
          },
          {
            "name": "category_id",
            "required": false,
            "in": "query",
            "description": "Фильтр по категории",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "is_vegetarian",
            "required": false,
            "in": "query",
            "description": "Фильтр только вегетарианских блюд",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "is_spicy",
            "required": false,
            "in": "query",
            "description": "Фильтр только острых блюд",
            "schema": {
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "min_price",
            "required": false,
            "in": "query",
            "description": "Минимальная цена",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "max_price",
            "required": false,
            "in": "query",
            "description": "Максимальная цена",
            "schema": {
              "example": 100,
              "type": "number"
            }
          },
          {
            "name": "max_cooking_time",
            "required": false,
            "in": "query",
            "description": "Максимальное время приготовления",
            "schema": {
              "example": 30,
              "type": "number"
            }
          },
          {
            "name": "max_calories",
            "required": false,
            "in": "query",
            "description": "Максимальное количество калорий",
            "schema": {
              "example": 500,
              "type": "number"
            }
          },
          {
            "name": "sort_by",
            "required": false,
            "in": "query",
            "description": "Поле для сортировки",
            "schema": {
              "example": "price",
              "type": "string",
              "enum": [
                "price",
                "cooking_time_minutes",
                "calories",
                "item_name",
                "created_at"
              ]
            }
          },
          {
            "name": "sort_order",
            "required": false,
            "in": "query",
            "description": "Порядок сортировки",
            "schema": {
              "example": "ASC",
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Номер страницы (для пагинации)",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Количество элементов на странице",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 20,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Список блюд успешно получен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuPaginationResponseDto"
                }
              }
            }
          }
        },
        "summary": "Получить меню с фильтрацией и поиском",
        "tags": [
          "Menu"
        ]
      },
      "post": {
        "description": "Создает новое блюдо в меню",
        "operationId": "MenuController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMenuItemDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Блюдо успешно создано",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuItemResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Некорректные данные для создания блюда или категория не найдена"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Создать новое блюдо",
        "tags": [
          "Menu"
        ]
      }
    },
    "/menu/category/{categoryId}": {
      "get": {
        "description": "Возвращает список блюд определенной категории с поддержкой фильтрации",
        "operationId": "MenuController_findByCategory",
        "parameters": [
          {
            "name": "categoryId",
            "required": true,
            "in": "path",
            "description": "ID категории меню",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Поиск по названию блюда",
            "schema": {
              "example": "хачапури",
              "type": "string"
            }
          },
          {
            "name": "category_id",
            "required": false,
            "in": "query",
            "description": "Фильтр по категории",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "is_vegetarian",
            "required": false,
            "in": "query",
            "description": "Фильтр только вегетарианских блюд",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "is_spicy",
            "required": false,
            "in": "query",
            "description": "Фильтр только острых блюд",
            "schema": {
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "min_price",
            "required": false,
            "in": "query",
            "description": "Минимальная цена",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "max_price",
            "required": false,
            "in": "query",
            "description": "Максимальная цена",
            "schema": {
              "example": 100,
              "type": "number"
            }
          },
          {
            "name": "max_cooking_time",
            "required": false,
            "in": "query",
            "description": "Максимальное время приготовления",
            "schema": {
              "example": 30,
              "type": "number"
            }
          },
          {
            "name": "max_calories",
            "required": false,
            "in": "query",
            "description": "Максимальное количество калорий",
            "schema": {
              "example": 500,
              "type": "number"
            }
          },
          {
            "name": "sort_by",
            "required": false,
            "in": "query",
            "description": "Поле для сортировки",
            "schema": {
              "example": "price",
              "type": "string",
              "enum": [
                "price",
                "cooking_time_minutes",
                "calories",
                "item_name",
                "created_at"
              ]
            }
          },
          {
            "name": "sort_order",
            "required": false,
            "in": "query",
            "description": "Порядок сортировки",
            "schema": {
              "example": "ASC",
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Номер страницы (для пагинации)",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Количество элементов на странице",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 20,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Блюда категории успешно получены",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuPaginationResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Категория с указанным ID не найдена"
          }
        },
        "summary": "Получить блюда по категории",
        "tags": [
          "Menu"
        ]
      }
    },
    "/menu/{id}": {
      "get": {
        "description": "Возвращает детальную информацию о блюде с информацией о категории",
        "operationId": "MenuController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Уникальный идентификатор блюда",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Блюдо найдено",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuItemResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Блюдо с указанным ID не найдено"
          }
        },
        "summary": "Получить блюдо по ID",
        "tags": [
          "Menu"
        ]
      },
      "patch": {
        "description": "Обновляет информацию о блюде",
        "operationId": "MenuController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Уникальный идентификатор блюда",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMenuItemDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Блюдо успешно обновлено",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuItemResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Некорректные данные для обновления блюда"
          },
          "404": {
            "description": "Блюдо с указанным ID не найдено"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Обновить блюдо",
        "tags": [
          "Menu"
        ]
      },
      "delete": {
        "description": "Полностью удаляет блюдо из базы данных",
        "operationId": "MenuController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Уникальный идентификатор блюда",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Блюдо успешно удалено"
          },
          "404": {
            "description": "Блюдо с указанным ID не найдено"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Удалить блюдо",
        "tags": [
          "Menu"
        ]
      }
    },
    "/menu/{id}/soft-delete": {
      "patch": {
        "description": "Помечает блюдо как удаленное (is_deleted = true), но не удаляет из БД",
        "operationId": "MenuController_softDelete",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Уникальный идентификатор блюда",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Блюдо успешно помечено как удаленное",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuItemResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Блюдо с указанным ID не найдено"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Мягкое удаление блюда",
        "tags": [
          "Menu"
        ]
      }
    },
    "/menu/{id}/restore": {
      "patch": {
        "description": "Восстанавливает мягко удаленное блюдо (is_deleted = false)",
        "operationId": "MenuController_restore",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Уникальный идентификатор блюда",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Блюдо успешно восстановлено",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuItemResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Блюдо с указанным ID не найдено"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Восстановить удаленное блюдо",
        "tags": [
          "Menu"
        ]
      }
    },
    "/restaurants": {
      "get": {
        "description": "Возвращает список ресторанов с поддержкой фильтрации:\n    - Поиск по названию\n    - Фильтр по городу и стране\n    - Фильтр по активности (по умолчанию только активные)\n    - Фильтр по минимальному рейтингу\n    Результаты отсортированы по рейтингу (лучшие сначала)",
        "operationId": "RestaurantsController_findAll",
        "parameters": [
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Поиск по названию ресторана",
            "schema": {
              "example": "тбилиси",
              "type": "string"
            }
          },
          {
            "name": "city",
            "required": false,
            "in": "query",
            "description": "Фильтр по городу",
            "schema": {
              "example": "Тбилиси",
              "type": "string"
            }
          },
          {
            "name": "country",
            "required": false,
            "in": "query",
            "description": "Фильтр по стране",
            "schema": {
              "example": "Грузия",
              "type": "string"
            }
          },
          {
            "name": "is_active",
            "required": false,
            "in": "query",
            "description": "Показывать только активные рестораны",
            "schema": {
              "default": true,
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "min_rating",
            "required": false,
            "in": "query",
            "description": "Минимальный рейтинг",
            "schema": {
              "minimum": 0,
              "maximum": 5,
              "example": 4,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Список ресторанов успешно получен",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RestaurantResponseDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Получить список ресторанов",
        "tags": [
          "Restaurants"
        ]
      },
      "post": {
        "description": "Создает новый ресторан в системе",
        "operationId": "RestaurantsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRestaurantDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Ресторан успешно создан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestaurantResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Некорректные данные для создания ресторана"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Создать новый ресторан",
        "tags": [
          "Restaurants"
        ]
      }
    },
    "/restaurants/{id}": {
      "get": {
        "description": "Возвращает детальную информацию о ресторане включая:\n    - Основную информацию\n    - Статистику (количество столиков, вместимость, отзывы, средний рейтинг)",
        "operationId": "RestaurantsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Уникальный идентификатор ресторана",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ресторан найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestaurantDetailResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Ресторан с указанным ID не найден"
          }
        },
        "summary": "Получить ресторан по ID",
        "tags": [
          "Restaurants"
        ]
      },
      "patch": {
        "description": "Обновляет информацию о ресторане",
        "operationId": "RestaurantsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Уникальный идентификатор ресторана",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRestaurantDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ресторан успешно обновлен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestaurantResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Некорректные данные для обновления ресторана"
          },
          "404": {
            "description": "Ресторан с указанным ID не найден"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Обновить ресторан",
        "tags": [
          "Restaurants"
        ]
      },
      "delete": {
        "description": "Полностью удаляет ресторан из системы",
        "operationId": "RestaurantsController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Уникальный идентификатор ресторана",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ресторан успешно удален"
          },
          "404": {
            "description": "Ресторан с указанным ID не найден"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Удалить ресторан",
        "tags": [
          "Restaurants"
        ]
      }
    },
    "/restaurants/{id}/deactivate": {
      "patch": {
        "description": "Помечает ресторан как неактивный (is_active = false)",
        "operationId": "RestaurantsController_deactivate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Уникальный идентификатор ресторана",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ресторан успешно деактивирован",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestaurantResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Ресторан с указанным ID не найден"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Деактивировать ресторан",
        "tags": [
          "Restaurants"
        ]
      }
    },
    "/restaurants/{id}/activate": {
      "patch": {
        "description": "Помечает ресторан как активный (is_active = true)",
        "operationId": "RestaurantsController_activate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Уникальный идентификатор ресторана",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ресторан успешно активирован",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestaurantResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Ресторан с указанным ID не найден"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Активировать ресторан",
        "tags": [
          "Restaurants"
        ]
      }
    },
    "/restaurants/{id}/tables": {
      "get": {
        "description": "Возвращает список всех столиков указанного ресторана с информацией о вместимости",
        "operationId": "RestaurantsController_getRestaurantTables",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Уникальный идентификатор ресторана",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Список столиков ресторана",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "table_id": {
                        "type": "number",
                        "example": 1
                      },
                      "table_number": {
                        "type": "number",
                        "example": 5
                      },
                      "seats_count": {
                        "type": "number",
                        "example": 4
                      },
                      "is_available": {
                        "type": "boolean",
                        "example": true
                      },
                      "restaurant_id": {
                        "type": "number",
                        "example": 1
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Ресторан с указанным ID не найден"
          }
        },
        "summary": "Получить столики ресторана",
        "tags": [
          "Restaurants"
        ]
      }
    },
    "/cart": {
      "get": {
        "description": "Возвращает текущую корзину пользователя со всеми товарами или создает новую пустую корзину",
        "operationId": "CartController_getCart",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Корзина успешно получена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить корзину пользователя",
        "tags": [
          "Cart"
        ]
      }
    },
    "/cart/add": {
      "post": {
        "description": "Добавляет указанное количество блюда в корзину. Если блюдо уже есть в корзине, увеличивает его количество.",
        "operationId": "CartController_addToCart",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddToCartDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Товар успешно добавлен в корзину",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Некорректные данные или превышено максимальное количество товара"
          },
          "404": {
            "description": "Блюдо не найдено или недоступно"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Добавить товар в корзину",
        "tags": [
          "Cart"
        ]
      }
    },
    "/cart/item/{itemId}": {
      "put": {
        "description": "Изменяет количество указанного блюда в корзине. Если количество равно 0, товар удаляется из корзины.",
        "operationId": "CartController_updateCartItem",
        "parameters": [
          {
            "name": "itemId",
            "required": true,
            "in": "path",
            "description": "ID блюда в меню",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCartItemDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Количество товара успешно обновлено",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Некорректное количество"
          },
          "404": {
            "description": "Товар не найден в корзине"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Обновить количество товара в корзине",
        "tags": [
          "Cart"
        ]
      },
      "delete": {
        "description": "Полностью удаляет указанное блюдо из корзины, независимо от количества",
        "operationId": "CartController_removeFromCart",
        "parameters": [
          {
            "name": "itemId",
            "required": true,
            "in": "path",
            "description": "ID блюда в меню",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Товар успешно удален из корзины",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Товар не найден в корзине"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Удалить товар из корзины",
        "tags": [
          "Cart"
        ]
      }
    },
    "/cart/clear": {
      "delete": {
        "description": "Удаляет все товары из корзины пользователя и саму корзину",
        "operationId": "CartController_clearCart",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Корзина успешно очищена",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Корзина успешно очищена"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Очистить корзину полностью",
        "tags": [
          "Cart"
        ]
      }
    },
    "/reviews": {
      "post": {
        "operationId": "ReviewsController_createReview",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReviewDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Review created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Restaurant not found"
          },
          "409": {
            "description": "Review already exists for this restaurant"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new review",
        "tags": [
          "reviews"
        ]
      },
      "get": {
        "operationId": "ReviewsController_getReviews",
        "parameters": [
          {
            "name": "restaurantId",
            "required": false,
            "in": "query",
            "description": "Filter by restaurant ID",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "userId",
            "required": false,
            "in": "query",
            "description": "Filter by user ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "minRating",
            "required": false,
            "in": "query",
            "description": "Filter by minimum rating",
            "schema": {
              "minimum": 1,
              "maximum": 5,
              "example": 3,
              "type": "number"
            }
          },
          {
            "name": "maxRating",
            "required": false,
            "in": "query",
            "description": "Filter by maximum rating",
            "schema": {
              "minimum": 1,
              "maximum": 5,
              "example": 5,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort by field",
            "schema": {
              "example": "created_at",
              "type": "string",
              "enum": [
                "created_at",
                "rating",
                "updated_at"
              ]
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "example": "DESC",
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (1-based)",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reviews retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedReviewsDto"
                }
              }
            }
          }
        },
        "summary": "Get all reviews with filtering and pagination",
        "tags": [
          "reviews"
        ]
      }
    },
    "/reviews/restaurant/{restaurantId}": {
      "get": {
        "operationId": "ReviewsController_getRestaurantReviews",
        "parameters": [
          {
            "name": "restaurantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "restaurantId",
            "required": false,
            "in": "query",
            "description": "Filter by restaurant ID",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "userId",
            "required": false,
            "in": "query",
            "description": "Filter by user ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "minRating",
            "required": false,
            "in": "query",
            "description": "Filter by minimum rating",
            "schema": {
              "minimum": 1,
              "maximum": 5,
              "example": 3,
              "type": "number"
            }
          },
          {
            "name": "maxRating",
            "required": false,
            "in": "query",
            "description": "Filter by maximum rating",
            "schema": {
              "minimum": 1,
              "maximum": 5,
              "example": 5,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort by field",
            "schema": {
              "example": "created_at",
              "type": "string",
              "enum": [
                "created_at",
                "rating",
                "updated_at"
              ]
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "example": "DESC",
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (1-based)",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Restaurant reviews retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedReviewsDto"
                }
              }
            }
          },
          "404": {
            "description": "Restaurant not found"
          }
        },
        "summary": "Get reviews for a specific restaurant",
        "tags": [
          "reviews"
        ]
      }
    },
    "/reviews/restaurant/{restaurantId}/stats": {
      "get": {
        "operationId": "ReviewsController_getRestaurantReviewStats",
        "parameters": [
          {
            "name": "restaurantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Restaurant review statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewStatsDto"
                }
              }
            }
          },
          "404": {
            "description": "Restaurant not found"
          }
        },
        "summary": "Get review statistics for a restaurant",
        "tags": [
          "reviews"
        ]
      }
    },
    "/reviews/user/{userId}": {
      "get": {
        "operationId": "ReviewsController_getUserReviews",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "restaurantId",
            "required": false,
            "in": "query",
            "description": "Filter by restaurant ID",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "userId",
            "required": false,
            "in": "query",
            "description": "Filter by user ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "minRating",
            "required": false,
            "in": "query",
            "description": "Filter by minimum rating",
            "schema": {
              "minimum": 1,
              "maximum": 5,
              "example": 3,
              "type": "number"
            }
          },
          {
            "name": "maxRating",
            "required": false,
            "in": "query",
            "description": "Filter by maximum rating",
            "schema": {
              "minimum": 1,
              "maximum": 5,
              "example": 5,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort by field",
            "schema": {
              "example": "created_at",
              "type": "string",
              "enum": [
                "created_at",
                "rating",
                "updated_at"
              ]
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "example": "DESC",
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (1-based)",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User reviews retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedReviewsDto"
                }
              }
            }
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get reviews by a specific user (Admin/Manager only)",
        "tags": [
          "reviews"
        ]
      }
    },
    "/reviews/my": {
      "get": {
        "operationId": "ReviewsController_getMyReviews",
        "parameters": [
          {
            "name": "restaurantId",
            "required": false,
            "in": "query",
            "description": "Filter by restaurant ID",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "userId",
            "required": false,
            "in": "query",
            "description": "Filter by user ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "minRating",
            "required": false,
            "in": "query",
            "description": "Filter by minimum rating",
            "schema": {
              "minimum": 1,
              "maximum": 5,
              "example": 3,
              "type": "number"
            }
          },
          {
            "name": "maxRating",
            "required": false,
            "in": "query",
            "description": "Filter by maximum rating",
            "schema": {
              "minimum": 1,
              "maximum": 5,
              "example": 5,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort by field",
            "schema": {
              "example": "created_at",
              "type": "string",
              "enum": [
                "created_at",
                "rating",
                "updated_at"
              ]
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "example": "DESC",
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (1-based)",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User reviews retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedReviewsDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get current user reviews",
        "tags": [
          "reviews"
        ]
      }
    },
    "/reviews/{id}": {
      "get": {
        "operationId": "ReviewsController_getReview",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Review retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Review not found"
          }
        },
        "summary": "Get review by ID",
        "tags": [
          "reviews"
        ]
      },
      "put": {
        "operationId": "ReviewsController_updateReview",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReviewDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Review updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "403": {
            "description": "Access denied - Admin only"
          },
          "404": {
            "description": "Review not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a review (Admin only)",
        "tags": [
          "reviews"
        ]
      },
      "delete": {
        "operationId": "ReviewsController_deleteReview",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Review deleted successfully"
          },
          "403": {
            "description": "Access denied - not review owner"
          },
          "404": {
            "description": "Review not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a review",
        "tags": [
          "reviews"
        ]
      }
    },
    "/reviews/restaurant/{restaurantId}/my": {
      "delete": {
        "operationId": "ReviewsController_deleteMyRestaurantReview",
        "parameters": [
          {
            "name": "restaurantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Review deleted successfully"
          },
          "404": {
            "description": "Review not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete current user review for a restaurant",
        "tags": [
          "reviews"
        ]
      }
    },
    "/reviews/restaurant/{restaurantId}/toggle": {
      "post": {
        "operationId": "ReviewsController_toggleRestaurantReview",
        "parameters": [
          {
            "name": "restaurantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReviewDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Review toggled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewResponseDto"
                }
              }
            }
          },
          "201": {
            "description": "Review created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Restaurant not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Toggle review for a restaurant (create or delete)",
        "tags": [
          "reviews"
        ]
      }
    },
    "/reservations": {
      "post": {
        "description": "\n    Создает новое бронирование столика с проверкой всех бизнес-правил:\n    - Один пользователь может иметь только одно активное бронирование\n    - Столик должен принадлежать выбранному ресторану\n    - Количество гостей не должно превышать вместимость столика\n    - Бронирование возможно только в рабочие часы ресторана\n    - Нельзя забронировать занятое время\n    - Бронирование доступно с текущей даты на месяц вперед\n    - Продолжительность от 1 до 8 часов\n    ",
        "operationId": "ReservationsController_createReservation",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReservationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Бронирование успешно создано",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Неверные данные или нарушение бизнес-правил",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Количество гостей превышает вместимость столика"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Неавторизованный доступ",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Ресторан или столик не найден",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Столик не найден или не принадлежит выбранному ресторану"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Конфликт бронирования",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 409
                    },
                    "message": {
                      "type": "string",
                      "example": "У вас уже есть активное бронирование"
                    },
                    "error": {
                      "type": "string",
                      "example": "Conflict"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Создать новое бронирование столика",
        "tags": [
          "reservations"
        ]
      },
      "get": {
        "description": "Возвращает список всех бронирований в системе (только для админов и менеджеров)",
        "operationId": "ReservationsController_getAllReservations",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Список всех бронирований",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReservationResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить все бронирования",
        "tags": [
          "reservations"
        ]
      }
    },
    "/reservations/active": {
      "get": {
        "description": "Возвращает список активных бронирований (unconfirmed, confirmed, started)",
        "operationId": "ReservationsController_getActiveReservations",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Список активных бронирований",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReservationResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить все активные бронирования",
        "tags": [
          "reservations"
        ]
      }
    },
    "/reservations/inactive": {
      "get": {
        "description": "Возвращает список завершенных и отмененных бронирований",
        "operationId": "ReservationsController_getInactiveReservations",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Список неактивных бронирований",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReservationResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить все неактивные бронирования",
        "tags": [
          "reservations"
        ]
      }
    },
    "/reservations/availability/{restaurantId}/{tableId}": {
      "get": {
        "description": "Возвращает активные бронирования и занятые временные слоты для конкретного столика на выбранную дату",
        "operationId": "ReservationsController_getTableAvailability",
        "parameters": [
          {
            "name": "restaurantId",
            "required": true,
            "in": "path",
            "description": "ID ресторана",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "tableId",
            "required": true,
            "in": "path",
            "description": "ID столика",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "date",
            "required": true,
            "in": "query",
            "description": "Дата для проверки доступности (YYYY-MM-DD)",
            "schema": {
              "example": "2025-10-25",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Информация о доступности столика",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestaurantTableAvailabilityDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить доступность столика на определенную дату",
        "tags": [
          "reservations"
        ]
      }
    },
    "/reservations/my": {
      "get": {
        "description": "Возвращает все бронирования авторизованного пользователя",
        "operationId": "ReservationsController_getUserReservations",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Список бронирований пользователя",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReservationResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить бронирования текущего пользователя",
        "tags": [
          "reservations"
        ]
      }
    },
    "/reservations/my/active": {
      "get": {
        "description": "Возвращает активные бронирования авторизованного пользователя",
        "operationId": "ReservationsController_getUserActiveReservations",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Список активных бронирований пользователя",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReservationResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить активные бронирования текущего пользователя",
        "tags": [
          "reservations"
        ]
      }
    },
    "/reservations/{reservationId}/confirm": {
      "patch": {
        "description": "\n    Подтверждает бронирование пользователя. Возможно только для бронирований со статусом 'unconfirmed'.\n    При подтверждении статус меняется на 'confirmed' и устанавливается время подтверждения.\n    ",
        "operationId": "ReservationsController_confirmReservation",
        "parameters": [
          {
            "name": "reservationId",
            "required": true,
            "in": "path",
            "description": "ID бронирования для подтверждения",
            "schema": {
              "example": "uuid-string",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Бронирование успешно подтверждено",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Нельзя подтвердить бронирование с текущим статусом",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Можно подтвердить только неподтвержденные бронирования. Текущий статус: confirmed"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Бронирование не найдено или не принадлежит пользователю",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Бронирование не найдено или не принадлежит вам"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Подтвердить бронирование",
        "tags": [
          "reservations"
        ]
      }
    },
    "/reservations/{reservationId}/cancel": {
      "patch": {
        "description": "\n    Отменяет бронирование пользователя. Возможно только для бронирований со статусом 'unconfirmed'.\n    При отмене статус меняется на 'cancelled'.\n    ",
        "operationId": "ReservationsController_cancelReservation",
        "parameters": [
          {
            "name": "reservationId",
            "required": true,
            "in": "path",
            "description": "ID бронирования для отмены",
            "schema": {
              "example": "uuid-string",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Бронирование успешно отменено",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Нельзя отменить бронирование с текущим статусом",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Можно отменить только неподтвержденные бронирования. Текущий статус: confirmed"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Бронирование не найдено или не принадлежит пользователю",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Бронирование не найдено или не принадлежит вам"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Отменить бронирование",
        "tags": [
          "reservations"
        ]
      }
    },
    "/orders": {
      "post": {
        "description": "\n    Создает заказ на основе содержимого корзины пользователя.\n    \n    Типы заказов:\n    - delivery: Доставка на дом (требуется адрес доставки, взимается fee 5%)\n    - dine_in: Заказ в ресторане (требуется активное бронирование со статусом 'started')\n    \n    Валидация:\n    - Корзина не должна быть пустой\n    - Для delivery: все адресные поля обязательны, должен быть активный ресторан в городе доставки\n    - Для dine_in: reservation_id обязателен, бронирование должно быть в статусе 'started'\n    - После создания заказа корзина очищается\n    ",
        "operationId": "OrdersController_createOrder",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Заказ успешно создан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Неверные данные или нарушение бизнес-правил",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Корзина пуста"
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Корзина или бронирование не найдено",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Корзина пользователя не найдена"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Создать заказ из корзины",
        "tags": [
          "orders"
        ]
      },
      "get": {
        "description": "Возвращает все заказы в системе (только для админов и менеджеров)",
        "operationId": "OrdersController_getAllOrders",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Список всех заказов",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить все заказы",
        "tags": [
          "orders"
        ]
      }
    },
    "/orders/my": {
      "get": {
        "description": "Возвращает все заказы авторизованного пользователя",
        "operationId": "OrdersController_getUserOrders",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Список заказов пользователя",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить заказы текущего пользователя",
        "tags": [
          "orders"
        ]
      }
    },
    "/orders/my/address": {
      "get": {
        "description": "Возвращает адрес пользователя для автозаполнения при создании заказа с доставкой",
        "operationId": "OrdersController_getUserAddress",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Адрес пользователя",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "country": {
                      "type": "string",
                      "example": "Грузия"
                    },
                    "city": {
                      "type": "string",
                      "example": "Тбилиси"
                    },
                    "street_address": {
                      "type": "string",
                      "example": "ул. Руставели, 15"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить адрес пользователя для автозаполнения",
        "tags": [
          "orders"
        ]
      }
    },
    "/orders/{orderId}": {
      "get": {
        "description": "Возвращает детальную информацию о заказе",
        "operationId": "OrdersController_getOrder",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "description": "ID заказа",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Информация о заказе",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Заказ не найден"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Получить заказ по ID",
        "tags": [
          "orders"
        ]
      }
    }
  },
  "info": {
    "title": "Georgian Restaurant API",
    "description": "API для управления грузинскими ресторанами с системой бронирования, заказов и аудита",
    "version": "1.0.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "auth",
      "description": "Аутентификация и авторизация"
    },
    {
      "name": "users",
      "description": "Управление пользователями"
    },
    {
      "name": "restaurants",
      "description": "Управление ресторанами"
    },
    {
      "name": "menu",
      "description": "Управление меню"
    },
    {
      "name": "tables",
      "description": "Управление столиками"
    },
    {
      "name": "reservations",
      "description": "Бронирование столиков"
    },
    {
      "name": "orders",
      "description": "Заказы"
    },
    {
      "name": "audit",
      "description": "Аудит и логирование"
    },
    {
      "name": "health",
      "description": "Мониторинг состояния системы"
    }
  ],
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Development server"
    }
  ],
  "components": {
    "securitySchemes": {
      "JWT-auth": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http",
        "name": "JWT",
        "description": "Enter JWT token",
        "in": "header"
      }
    },
    "schemas": {
      "LoginDto": {
        "type": "object",
        "properties": {
          "usernameOrEmail": {
            "type": "string",
            "description": "Username or email address",
            "example": "admin or user@example.com"
          },
          "password": {
            "type": "string",
            "description": "User password",
            "example": "password123",
            "minLength": 6
          }
        },
        "required": [
          "usernameOrEmail",
          "password"
        ]
      },
      "AuthResponseDto": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "JWT access token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          },
          "user": {
            "type": "object",
            "description": "User information",
            "example": {
              "user_id": "uuid-here",
              "username": "admin",
              "email": "admin@georgian-restaurant.ge",
              "first_name": "Тенгиз",
              "last_name": "Админидзе",
              "phone": "+995591234567",
              "role": "admin",
              "role_id": 1,
              "country": "Грузия",
              "city": "Тбилиси",
              "street_address": "ул. Руставели 15"
            }
          }
        },
        "required": [
          "access_token",
          "user"
        ]
      },
      "RegisterDto": {
        "type": "object",
        "properties": {}
      },
      "UpdateProfileDto": {
        "type": "object",
        "properties": {}
      },
      "ChangePasswordDto": {
        "type": "object",
        "properties": {}
      },
      "MenuCategoryResponseDto": {
        "type": "object",
        "properties": {
          "category_id": {
            "type": "number",
            "description": "Уникальный идентификатор категории",
            "example": 1
          },
          "category_name": {
            "type": "string",
            "description": "Название категории меню",
            "example": "Горячие блюда",
            "minLength": 2,
            "maxLength": 100
          },
          "category_description": {
            "type": "string",
            "description": "Описание категории",
            "example": "Основные блюда грузинской кухни"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Дата создания категории",
            "example": "2024-01-15T10:30:00.000Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Дата последнего обновления",
            "example": "2024-01-15T10:30:00.000Z"
          }
        },
        "required": [
          "category_id",
          "category_name",
          "created_at",
          "updated_at"
        ]
      },
      "CreateMenuCategoryDto": {
        "type": "object",
        "properties": {
          "category_name": {
            "type": "string",
            "description": "Название категории меню",
            "example": "Горячие блюда",
            "minLength": 2,
            "maxLength": 100
          },
          "category_description": {
            "type": "string",
            "description": "Описание категории",
            "example": "Основные блюда грузинской кухни"
          }
        },
        "required": [
          "category_name"
        ]
      },
      "UpdateMenuCategoryDto": {
        "type": "object",
        "properties": {
          "category_name": {
            "type": "string",
            "description": "Название категории меню",
            "example": "Горячие блюда",
            "minLength": 2,
            "maxLength": 100
          },
          "category_description": {
            "type": "string",
            "description": "Описание категории",
            "example": "Основные блюда грузинской кухни"
          }
        }
      },
      "MenuItemResponseDto": {
        "type": "object",
        "properties": {
          "item_id": {
            "type": "number",
            "description": "Уникальный идентификатор блюда",
            "example": 1
          },
          "item_name": {
            "type": "string",
            "description": "Название блюда",
            "example": "Хачапури по-аджарски",
            "minLength": 3,
            "maxLength": 150
          },
          "item_description": {
            "type": "string",
            "description": "Описание блюда",
            "example": "Традиционная грузинская лепешка с сыром и яйцом"
          },
          "category_id": {
            "type": "number",
            "description": "ID категории меню",
            "example": 1
          },
          "price": {
            "type": "number",
            "description": "Стоимость блюда",
            "example": 25.5
          },
          "cooking_time_minutes": {
            "type": "number",
            "description": "Время приготовления в минутах",
            "example": 15
          },
          "calories": {
            "type": "number",
            "description": "Калории",
            "example": 350
          },
          "is_vegetarian": {
            "type": "boolean",
            "description": "Вегетарианское блюдо",
            "example": false
          },
          "is_spicy": {
            "type": "boolean",
            "description": "Острое блюдо",
            "example": false
          },
          "is_deleted": {
            "type": "boolean",
            "description": "Удалено (мягкое удаление)",
            "example": false
          },
          "image_url": {
            "type": "string",
            "description": "URL изображения блюда",
            "example": "https://example.com/image.jpg"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Дата создания",
            "example": "2024-01-15T10:30:00.000Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Дата последнего обновления",
            "example": "2024-01-15T10:30:00.000Z"
          },
          "category": {
            "type": "object",
            "description": "Информация о категории"
          }
        },
        "required": [
          "item_id",
          "item_name",
          "category_id",
          "price",
          "cooking_time_minutes",
          "is_vegetarian",
          "is_spicy",
          "is_deleted",
          "created_at",
          "updated_at"
        ]
      },
      "MenuPaginationResponseDto": {
        "type": "object",
        "properties": {
          "items": {
            "description": "Список блюд",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MenuItemResponseDto"
            }
          },
          "total": {
            "type": "number",
            "description": "Общее количество блюд",
            "example": 45
          },
          "page": {
            "type": "number",
            "description": "Текущая страница",
            "example": 1
          },
          "limit": {
            "type": "number",
            "description": "Количество элементов на странице",
            "example": 20
          },
          "pages": {
            "type": "number",
            "description": "Общее количество страниц",
            "example": 3
          }
        },
        "required": [
          "items",
          "total",
          "page",
          "limit",
          "pages"
        ]
      },
      "CreateMenuItemDto": {
        "type": "object",
        "properties": {
          "item_name": {
            "type": "string",
            "description": "Название блюда",
            "example": "Хачапури по-аджарски",
            "minLength": 3,
            "maxLength": 150
          },
          "item_description": {
            "type": "string",
            "description": "Описание блюда",
            "example": "Традиционная грузинская лепешка с сыром и яйцом"
          },
          "category_id": {
            "type": "number",
            "description": "ID категории меню",
            "example": 1
          },
          "price": {
            "type": "number",
            "description": "Стоимость блюда",
            "example": 25.5
          },
          "cooking_time_minutes": {
            "type": "number",
            "description": "Время приготовления в минутах",
            "example": 15,
            "default": 0
          },
          "calories": {
            "type": "number",
            "description": "Калории",
            "example": 350
          },
          "is_vegetarian": {
            "type": "boolean",
            "description": "Вегетарианское блюдо",
            "example": false,
            "default": false
          },
          "is_spicy": {
            "type": "boolean",
            "description": "Острое блюдо",
            "example": false,
            "default": false
          },
          "image_url": {
            "type": "string",
            "description": "URL изображения блюда",
            "example": "https://example.com/image.jpg"
          }
        },
        "required": [
          "item_name",
          "category_id",
          "price"
        ]
      },
      "UpdateMenuItemDto": {
        "type": "object",
        "properties": {
          "item_name": {
            "type": "string",
            "description": "Название блюда",
            "example": "Хачапури по-аджарски",
            "minLength": 3,
            "maxLength": 150
          },
          "item_description": {
            "type": "string",
            "description": "Описание блюда",
            "example": "Традиционная грузинская лепешка с сыром и яйцом"
          },
          "category_id": {
            "type": "number",
            "description": "ID категории меню",
            "example": 1
          },
          "price": {
            "type": "number",
            "description": "Стоимость блюда",
            "example": 25.5
          },
          "cooking_time_minutes": {
            "type": "number",
            "description": "Время приготовления в минутах",
            "example": 15
          },
          "calories": {
            "type": "number",
            "description": "Калории",
            "example": 350
          },
          "is_vegetarian": {
            "type": "boolean",
            "description": "Вегетарианское блюдо",
            "example": false
          },
          "is_spicy": {
            "type": "boolean",
            "description": "Острое блюдо",
            "example": false
          },
          "image_url": {
            "type": "string",
            "description": "URL изображения блюда",
            "example": "https://example.com/image.jpg"
          }
        }
      },
      "RestaurantResponseDto": {
        "type": "object",
        "properties": {
          "restaurant_id": {
            "type": "number",
            "description": "Уникальный идентификатор ресторана",
            "example": 1
          },
          "restaurant_name": {
            "type": "string",
            "description": "Название ресторана",
            "example": "Ресторан \"Тбилиси\"",
            "minLength": 3,
            "maxLength": 100
          },
          "restaurant_description": {
            "type": "string",
            "description": "Описание ресторана",
            "example": "Аутентичная грузинская кухня в самом сердце города"
          },
          "country": {
            "type": "string",
            "description": "Страна",
            "example": "Грузия",
            "default": "Грузия"
          },
          "city": {
            "type": "string",
            "description": "Город",
            "example": "Тбилиси",
            "default": "Тбилиси"
          },
          "street_address": {
            "type": "string",
            "description": "Адрес ресторана",
            "example": "ул. Руставели, 15"
          },
          "working_hours": {
            "type": "object",
            "description": "Часы работы по дням недели",
            "example": {
              "monday": "10:00-22:00",
              "tuesday": "10:00-22:00",
              "wednesday": "10:00-22:00",
              "thursday": "10:00-22:00",
              "friday": "10:00-23:00",
              "saturday": "10:00-23:00",
              "sunday": "12:00-21:00"
            }
          },
          "is_active": {
            "type": "boolean",
            "description": "Активен ли ресторан",
            "example": true,
            "default": true
          },
          "rating": {
            "type": "number",
            "description": "Рейтинг ресторана",
            "example": 4.5,
            "minimum": 0,
            "maximum": 5
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Дата создания",
            "example": "2024-01-15T10:30:00.000Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Дата последнего обновления",
            "example": "2024-01-15T10:30:00.000Z"
          }
        },
        "required": [
          "restaurant_id",
          "restaurant_name",
          "country",
          "city",
          "street_address",
          "is_active",
          "rating",
          "created_at",
          "updated_at"
        ]
      },
      "RestaurantDetailResponseDto": {
        "type": "object",
        "properties": {
          "restaurant_id": {
            "type": "number",
            "description": "Уникальный идентификатор ресторана",
            "example": 1
          },
          "restaurant_name": {
            "type": "string",
            "description": "Название ресторана",
            "example": "Ресторан \"Тбилиси\"",
            "minLength": 3,
            "maxLength": 100
          },
          "restaurant_description": {
            "type": "string",
            "description": "Описание ресторана",
            "example": "Аутентичная грузинская кухня в самом сердце города"
          },
          "country": {
            "type": "string",
            "description": "Страна",
            "example": "Грузия",
            "default": "Грузия"
          },
          "city": {
            "type": "string",
            "description": "Город",
            "example": "Тбилиси",
            "default": "Тбилиси"
          },
          "street_address": {
            "type": "string",
            "description": "Адрес ресторана",
            "example": "ул. Руставели, 15"
          },
          "working_hours": {
            "type": "object",
            "description": "Часы работы по дням недели",
            "example": {
              "monday": "10:00-22:00",
              "tuesday": "10:00-22:00",
              "wednesday": "10:00-22:00",
              "thursday": "10:00-22:00",
              "friday": "10:00-23:00",
              "saturday": "10:00-23:00",
              "sunday": "12:00-21:00"
            }
          },
          "is_active": {
            "type": "boolean",
            "description": "Активен ли ресторан",
            "example": true,
            "default": true
          },
          "rating": {
            "type": "number",
            "description": "Рейтинг ресторана",
            "example": 4.5,
            "minimum": 0,
            "maximum": 5
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Дата создания",
            "example": "2024-01-15T10:30:00.000Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Дата последнего обновления",
            "example": "2024-01-15T10:30:00.000Z"
          },
          "stats": {
            "type": "object",
            "description": "Статистика ресторана"
          }
        },
        "required": [
          "restaurant_id",
          "restaurant_name",
          "country",
          "city",
          "street_address",
          "is_active",
          "rating",
          "created_at",
          "updated_at"
        ]
      },
      "CreateRestaurantDto": {
        "type": "object",
        "properties": {
          "restaurant_name": {
            "type": "string",
            "description": "Название ресторана",
            "example": "Ресторан \"Тбилиси\"",
            "minLength": 3,
            "maxLength": 100
          },
          "restaurant_description": {
            "type": "string",
            "description": "Описание ресторана",
            "example": "Аутентичная грузинская кухня в самом сердце города"
          },
          "country": {
            "type": "string",
            "description": "Страна",
            "example": "Грузия",
            "default": "Грузия"
          },
          "city": {
            "type": "string",
            "description": "Город",
            "example": "Тбилиси",
            "default": "Тбилиси"
          },
          "street_address": {
            "type": "string",
            "description": "Адрес ресторана",
            "example": "ул. Руставели, 15",
            "minLength": 5
          },
          "working_hours": {
            "type": "object",
            "description": "Часы работы по дням недели",
            "example": {
              "monday": "10:00-22:00",
              "tuesday": "10:00-22:00",
              "wednesday": "10:00-22:00",
              "thursday": "10:00-22:00",
              "friday": "10:00-23:00",
              "saturday": "10:00-23:00",
              "sunday": "12:00-21:00"
            }
          },
          "is_active": {
            "type": "boolean",
            "description": "Активен ли ресторан",
            "example": true,
            "default": true
          }
        },
        "required": [
          "restaurant_name",
          "street_address"
        ]
      },
      "UpdateRestaurantDto": {
        "type": "object",
        "properties": {
          "restaurant_name": {
            "type": "string",
            "description": "Название ресторана",
            "example": "Ресторан \"Тбилиси\"",
            "minLength": 3,
            "maxLength": 100
          },
          "restaurant_description": {
            "type": "string",
            "description": "Описание ресторана",
            "example": "Аутентичная грузинская кухня в самом сердце города"
          },
          "country": {
            "type": "string",
            "description": "Страна",
            "example": "Грузия"
          },
          "city": {
            "type": "string",
            "description": "Город",
            "example": "Тбилиси"
          },
          "street_address": {
            "type": "string",
            "description": "Адрес ресторана",
            "example": "ул. Руставели, 15",
            "minLength": 5
          },
          "working_hours": {
            "type": "object",
            "description": "Часы работы по дням недели",
            "example": {
              "monday": "10:00-22:00",
              "tuesday": "10:00-22:00",
              "wednesday": "10:00-22:00",
              "thursday": "10:00-22:00",
              "friday": "10:00-23:00",
              "saturday": "10:00-23:00",
              "sunday": "12:00-21:00"
            }
          },
          "is_active": {
            "type": "boolean",
            "description": "Активен ли ресторан",
            "example": true
          },
          "rating": {
            "type": "number",
            "description": "Рейтинг ресторана (только для админов)",
            "example": 4.5,
            "minimum": 0,
            "maximum": 5
          }
        }
      },
      "CartItemResponseDto": {
        "type": "object",
        "properties": {
          "cart_item_id": {
            "type": "number",
            "description": "ID элемента корзины",
            "example": 1
          },
          "item_id": {
            "type": "number",
            "description": "ID блюда",
            "example": 1
          },
          "item_name": {
            "type": "string",
            "description": "Название блюда",
            "example": "Хачапури по-аджарски"
          },
          "item_description": {
            "type": "string",
            "description": "Описание блюда",
            "example": "Традиционная лодочка из теста с сыром, маслом и яйцом"
          },
          "unit_price": {
            "type": "number",
            "description": "Цена за единицу",
            "example": 18.5
          },
          "quantity": {
            "type": "number",
            "description": "Количество в корзине",
            "example": 2
          },
          "total_price": {
            "type": "number",
            "description": "Общая стоимость позиции (цена * количество)",
            "example": 37
          },
          "added_at": {
            "format": "date-time",
            "type": "string",
            "description": "Время добавления в корзину",
            "example": "2024-10-20T10:30:00.000Z"
          },
          "image_url": {
            "type": "string",
            "description": "URL изображения блюда (может быть null)",
            "example": "https://example.com/khachapuri.jpg",
            "nullable": true
          },
          "category_name": {
            "type": "string",
            "description": "Категория блюда",
            "example": "Горячие блюда"
          },
          "is_vegetarian": {
            "type": "boolean",
            "description": "Вегетарианское блюдо",
            "example": true
          },
          "is_spicy": {
            "type": "boolean",
            "description": "Острое блюдо",
            "example": false
          }
        },
        "required": [
          "cart_item_id",
          "item_id",
          "item_name",
          "item_description",
          "unit_price",
          "quantity",
          "total_price",
          "added_at",
          "image_url",
          "category_name",
          "is_vegetarian",
          "is_spicy"
        ]
      },
      "CartResponseDto": {
        "type": "object",
        "properties": {
          "cart_id": {
            "type": "string",
            "description": "ID корзины",
            "example": "a1b2c3d4-e5f6-7g8h-9i0j-k1l2m3n4o5p6"
          },
          "user_id": {
            "type": "string",
            "description": "ID пользователя",
            "example": "f1e2d3c4-b5a6-9h8g-7j6i-5k4l3m2n1o0p"
          },
          "items": {
            "description": "Список товаров в корзине",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CartItemResponseDto"
            }
          },
          "total_items": {
            "type": "number",
            "description": "Общее количество единиц товаров в корзине",
            "example": 5
          },
          "total_amount": {
            "type": "number",
            "description": "Общая стоимость корзины",
            "example": 87.5
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Время создания корзины",
            "example": "2024-10-20T09:00:00.000Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Время последнего обновления корзины",
            "example": "2024-10-20T10:30:00.000Z"
          }
        },
        "required": [
          "cart_id",
          "user_id",
          "items",
          "total_items",
          "total_amount",
          "created_at",
          "updated_at"
        ]
      },
      "AddToCartDto": {
        "type": "object",
        "properties": {
          "item_id": {
            "type": "number",
            "description": "ID блюда из меню",
            "example": 1
          },
          "quantity": {
            "type": "number",
            "description": "Количество блюд для добавления в корзину (1-10)",
            "example": 2,
            "minimum": 1,
            "maximum": 10
          }
        },
        "required": [
          "item_id",
          "quantity"
        ]
      },
      "UpdateCartItemDto": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "number",
            "description": "Новое количество блюда в корзине (1-10). Если указать 0, блюдо будет удалено из корзины",
            "example": 3,
            "minimum": 0,
            "maximum": 10
          }
        },
        "required": [
          "quantity"
        ]
      },
      "CreateReviewDto": {
        "type": "object",
        "properties": {
          "restaurant_id": {
            "type": "number",
            "description": "ID ресторана",
            "example": 1
          },
          "rating": {
            "type": "number",
            "description": "Рейтинг от 1 до 5",
            "example": 5,
            "minimum": 1,
            "maximum": 5
          },
          "review_text": {
            "type": "string",
            "description": "Текст отзыва (минимум 10 символов)",
            "example": "Отличный ресторан с прекрасной кухней и обслуживанием!",
            "minLength": 10
          }
        },
        "required": [
          "restaurant_id",
          "rating"
        ]
      },
      "ReviewResponseDto": {
        "type": "object",
        "properties": {
          "review_id": {
            "type": "string",
            "description": "ID отзыва",
            "example": "d5669069-0e13-4c97-a07d-381c12f37142"
          },
          "user_id": {
            "type": "string",
            "description": "ID пользователя",
            "example": "d5669069-0e13-4c97-a07d-381c12f37142"
          },
          "restaurant_id": {
            "type": "number",
            "description": "ID ресторана",
            "example": 1
          },
          "rating": {
            "type": "number",
            "description": "Рейтинг от 1 до 5",
            "example": 5
          },
          "review_text": {
            "type": "string",
            "description": "Текст отзыва",
            "example": "Отличный ресторан с прекрасной кухней и обслуживанием!"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Дата создания",
            "example": "2024-01-15T10:30:00Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Дата обновления",
            "example": "2024-01-15T15:45:00Z"
          },
          "user": {
            "type": "object",
            "description": "Информация о пользователе",
            "properties": {
              "user_id": {
                "type": "string",
                "example": "d5669069-0e13-4c97-a07d-381c12f37142"
              },
              "username": {
                "type": "string",
                "example": "john_doe"
              },
              "first_name": {
                "type": "string",
                "example": "John"
              },
              "last_name": {
                "type": "string",
                "example": "Doe"
              }
            }
          }
        },
        "required": [
          "review_id",
          "user_id",
          "restaurant_id",
          "rating",
          "created_at",
          "updated_at"
        ]
      },
      "PaginatedReviewsDto": {
        "type": "object",
        "properties": {
          "reviews": {
            "description": "List of reviews",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReviewResponseDto"
            }
          },
          "total": {
            "type": "number",
            "description": "Total number of reviews",
            "example": 150
          },
          "page": {
            "type": "number",
            "description": "Current page number",
            "example": 1
          },
          "limit": {
            "type": "number",
            "description": "Number of items per page",
            "example": 10
          },
          "totalPages": {
            "type": "number",
            "description": "Total number of pages",
            "example": 15
          },
          "hasNext": {
            "type": "boolean",
            "description": "Whether there is a next page",
            "example": true
          },
          "hasPrev": {
            "type": "boolean",
            "description": "Whether there is a previous page",
            "example": false
          }
        },
        "required": [
          "reviews",
          "total",
          "page",
          "limit",
          "totalPages",
          "hasNext",
          "hasPrev"
        ]
      },
      "ReviewStatsDto": {
        "type": "object",
        "properties": {
          "restaurantId": {
            "type": "number",
            "description": "Restaurant ID",
            "example": 1
          },
          "totalReviews": {
            "type": "number",
            "description": "Total number of reviews",
            "example": 125
          },
          "averageRating": {
            "type": "number",
            "description": "Average rating",
            "example": 4.3
          },
          "ratingDistribution": {
            "type": "object",
            "description": "Rating distribution",
            "example": {
              "1": 5,
              "2": 10,
              "3": 20,
              "4": 45,
              "5": 45
            }
          },
          "recentReviews": {
            "description": "Most recent reviews",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReviewResponseDto"
            }
          }
        },
        "required": [
          "restaurantId",
          "totalReviews",
          "averageRating",
          "ratingDistribution",
          "recentReviews"
        ]
      },
      "UpdateReviewDto": {
        "type": "object",
        "properties": {
          "rating": {
            "type": "number",
            "description": "Рейтинг от 1 до 5",
            "example": 4,
            "minimum": 1,
            "maximum": 5
          },
          "review_text": {
            "type": "string",
            "description": "Текст отзыва (минимум 10 символов)",
            "example": "Обновленный отзыв о ресторане",
            "minLength": 10
          }
        }
      },
      "CreateReservationDto": {
        "type": "object",
        "properties": {
          "restaurant_id": {
            "type": "number",
            "description": "ID ресторана для бронирования",
            "example": 1
          },
          "table_id": {
            "type": "number",
            "description": "ID столика для бронирования",
            "example": 1
          },
          "reservation_date": {
            "type": "string",
            "description": "Дата бронирования (YYYY-MM-DD)",
            "example": "2025-10-25"
          },
          "reservation_time": {
            "type": "string",
            "description": "Время начала бронирования (HH:MM)",
            "example": "18:00"
          },
          "duration_hours": {
            "type": "number",
            "description": "Продолжительность бронирования в часах (1-8)",
            "example": 2,
            "minimum": 1,
            "maximum": 8
          },
          "guests_count": {
            "type": "number",
            "description": "Количество гостей",
            "example": 4,
            "minimum": 1
          },
          "contact_phone": {
            "type": "string",
            "description": "Контактный телефон",
            "example": "+995555123456"
          }
        },
        "required": [
          "restaurant_id",
          "table_id",
          "reservation_date",
          "reservation_time",
          "duration_hours",
          "guests_count",
          "contact_phone"
        ]
      },
      "ReservationResponseDto": {
        "type": "object",
        "properties": {
          "reservation_id": {
            "type": "string",
            "description": "ID бронирования",
            "example": "b42bb960-ff62-4ca6-8e9d-c47ce9470ed6"
          },
          "user_id": {
            "type": "string",
            "description": "ID пользователя",
            "example": "a32cc850-ee52-3ba6-7d8c-b47ce9470ed5"
          },
          "restaurant_id": {
            "type": "number",
            "description": "ID ресторана",
            "example": 1
          },
          "restaurant_name": {
            "type": "string",
            "description": "Название ресторана",
            "example": "Тбилисо"
          },
          "table_id": {
            "type": "number",
            "description": "ID столика",
            "example": 1
          },
          "table_number": {
            "type": "number",
            "description": "Номер столика",
            "example": 5
          },
          "seats_count": {
            "type": "number",
            "description": "Количество мест за столиком",
            "example": 4
          },
          "reservation_date": {
            "type": "string",
            "description": "Дата бронирования",
            "example": "2025-10-25"
          },
          "reservation_time": {
            "type": "string",
            "description": "Время начала бронирования",
            "example": "18:00:00"
          },
          "duration_hours": {
            "type": "number",
            "description": "Продолжительность в часах",
            "example": 2
          },
          "guests_count": {
            "type": "number",
            "description": "Количество гостей",
            "example": 4
          },
          "reservation_status": {
            "type": "string",
            "description": "Статус бронирования",
            "enum": [
              "unconfirmed",
              "confirmed",
              "started",
              "completed",
              "cancelled"
            ],
            "example": "unconfirmed"
          },
          "contact_phone": {
            "type": "string",
            "description": "Контактный телефон",
            "example": "+995555123456"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Дата создания бронирования",
            "example": "2025-10-22T15:30:00.000Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Дата последнего обновления",
            "example": "2025-10-22T15:30:00.000Z"
          },
          "confirmed_at": {
            "format": "date-time",
            "type": "string",
            "description": "Дата подтверждения бронирования (если подтверждена)",
            "example": "2025-10-22T16:00:00.000Z"
          }
        },
        "required": [
          "reservation_id",
          "user_id",
          "restaurant_id",
          "restaurant_name",
          "table_id",
          "table_number",
          "seats_count",
          "reservation_date",
          "reservation_time",
          "duration_hours",
          "guests_count",
          "reservation_status",
          "contact_phone",
          "created_at",
          "updated_at"
        ]
      },
      "OccupiedTimeSlotDto": {
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "description": "Время начала занятого слота",
            "example": "18:00"
          },
          "end": {
            "type": "string",
            "description": "Время окончания занятого слота",
            "example": "20:00"
          },
          "reservation_id": {
            "type": "string",
            "description": "ID бронирования, занимающего этот слот",
            "example": "b42bb960-ff62-4ca6-8e9d-c47ce9470ed6"
          }
        },
        "required": [
          "start",
          "end",
          "reservation_id"
        ]
      },
      "RestaurantTableAvailabilityDto": {
        "type": "object",
        "properties": {
          "reservations": {
            "description": "Список активных бронирований для данного столика на выбранную дату",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservationResponseDto"
            }
          },
          "occupiedTimeSlots": {
            "description": "Список занятых временных слотов",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OccupiedTimeSlotDto"
            }
          }
        },
        "required": [
          "reservations",
          "occupiedTimeSlots"
        ]
      },
      "CreateOrderDto": {
        "type": "object",
        "properties": {
          "order_type": {
            "type": "string",
            "description": "Тип заказа",
            "enum": [
              "delivery",
              "dine_in"
            ],
            "example": "delivery"
          },
          "delivery_country": {
            "type": "string",
            "description": "Страна доставки (только для delivery)",
            "example": "Грузия"
          },
          "delivery_city": {
            "type": "string",
            "description": "Город доставки (только для delivery)",
            "example": "Тбилиси"
          },
          "delivery_street_address": {
            "type": "string",
            "description": "Адрес доставки (только для delivery)",
            "example": "ул. Руставели, 15, кв. 10"
          },
          "delivery_phone": {
            "type": "string",
            "description": "Телефон для доставки (только для delivery)",
            "example": "+995555123456"
          },
          "reservation_id": {
            "type": "string",
            "description": "ID бронирования (только для dine_in)",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "should_update_user_address": {
            "type": "boolean",
            "description": "Обновить ли адрес пользователя указанным адресом доставки",
            "example": false,
            "default": false
          }
        },
        "required": [
          "order_type"
        ]
      },
      "OrderResponseDto": {
        "type": "object",
        "properties": {
          "order_id": {
            "type": "string",
            "description": "ID заказа",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "user_id": {
            "type": "string",
            "description": "ID пользователя",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "order_type": {
            "type": "string",
            "description": "Тип заказа",
            "enum": [
              "delivery",
              "dine_in"
            ],
            "example": "delivery"
          },
          "delivery_country": {
            "type": "string",
            "description": "Страна доставки",
            "example": "Грузия",
            "nullable": true
          },
          "delivery_city": {
            "type": "string",
            "description": "Город доставки",
            "example": "Тбилиси",
            "nullable": true
          },
          "delivery_street_address": {
            "type": "string",
            "description": "Адрес доставки",
            "example": "ул. Руставели, 15, кв. 10",
            "nullable": true
          },
          "delivery_phone": {
            "type": "string",
            "description": "Телефон доставки",
            "example": "+995555123456",
            "nullable": true
          },
          "reservation_id": {
            "type": "string",
            "description": "ID бронирования",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "nullable": true
          },
          "subtotal": {
            "type": "number",
            "description": "Стоимость товаров",
            "example": 45.5
          },
          "delivery_fee": {
            "type": "number",
            "description": "Стоимость доставки",
            "example": 2.28
          },
          "total_amount": {
            "type": "number",
            "description": "Общая стоимость",
            "example": 47.78
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Дата создания заказа",
            "example": "2025-10-23T10:30:00Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Дата последнего обновления",
            "example": "2025-10-23T10:30:00Z"
          },
          "order_items": {
            "type": "array",
            "description": "Позиции заказа",
            "items": {
              "type": "object",
              "properties": {
                "order_item_id": {
                  "type": "number",
                  "example": 1
                },
                "item_id": {
                  "type": "number",
                  "example": 5
                },
                "item_name": {
                  "type": "string",
                  "example": "Хачапури по-аджарски"
                },
                "quantity": {
                  "type": "number",
                  "example": 2
                },
                "unit_price": {
                  "type": "number",
                  "example": 18.5
                },
                "total_price": {
                  "type": "number",
                  "example": 37
                }
              }
            }
          }
        },
        "required": [
          "order_id",
          "user_id",
          "order_type",
          "delivery_country",
          "delivery_city",
          "delivery_street_address",
          "delivery_phone",
          "reservation_id",
          "subtotal",
          "delivery_fee",
          "total_amount",
          "created_at",
          "updated_at",
          "order_items"
        ]
      }
    }
  }
}