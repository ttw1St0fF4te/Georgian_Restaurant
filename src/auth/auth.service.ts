import { Injectable, UnauthorizedException, ConflictException, BadRequestException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { JwtService } from '@nestjs/jwt';
import * as bcrypt from 'bcrypt';

import { User } from '../entities/user.entity';
import { UserRole } from '../entities/user-role.entity';
import { UserAddress } from '../entities/user-address.entity';
import { LoginDto } from './dto/login.dto';
import { RegisterDto } from './dto/register.dto';
import { CreateUserDto } from './dto/create-user.dto';
import { UpdateUserDto } from './dto/update-user.dto';
import { AuthResponseDto, JwtPayload } from './dto/auth-response.dto';
import { RegisterResponseDto } from './dto/register-response.dto';
import { UpdateProfileDto } from '../users/dto/update-profile.dto';
import { ChangePasswordDto } from '../users/dto/change-password.dto';

@Injectable()
export class AuthService {
  constructor(
    @InjectRepository(User)
    private userRepository: Repository<User>,
    @InjectRepository(UserRole)
    private userRoleRepository: Repository<UserRole>,
    @InjectRepository(UserAddress)
    private userAddressRepository: Repository<UserAddress>,
    private jwtService: JwtService,
  ) {}

  async validateUser(username: string, password: string): Promise<any> {
    console.log('üîç Attempting to validate user:', username);
    
    const user = await this.userRepository.findOne({
      where: [
        { username },
        { email: username }, // –ü–æ–∑–≤–æ–ª—è–µ–º –≤—Ö–æ–¥–∏—Ç—å –∫–∞–∫ –ø–æ username, —Ç–∞–∫ –∏ –ø–æ email
      ],
      relations: ['role'],
    });

    console.log('üë§ User found:', user ? 'YES' : 'NO');
    
    if (user) {
      console.log('üìß User email:', user.email);
      console.log('üîë Password hash:', user.password_hash ? user.password_hash.substring(0, 10) + '...' : 'NO HASH');
      
      const passwordMatch = await bcrypt.compare(password, user.password_hash);
      console.log('üîê Password match:', passwordMatch);
      
      if (passwordMatch) {
        const { password_hash, ...result } = user;
        console.log('‚úÖ User validated successfully');
        return result;
      }
    }
    
    console.log('‚ùå User validation failed');
    return null;
  }

  async login(loginDto: LoginDto): Promise<AuthResponseDto> {
    const user = await this.validateUser(loginDto.usernameOrEmail, loginDto.password);
    
    if (!user) {
      throw new UnauthorizedException('–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userRole = await this.userRoleRepository.findOne({
      where: { role_id: user.role_id },
    });

    if (!userRole) {
      throw new UnauthorizedException('–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
    await this.userRepository.update(user.user_id, {
      last_login: new Date(),
    });

    // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userAddress = await this.userAddressRepository.findOne({
      where: { user_id: user.user_id },
      order: { created_at: 'DESC' },
      select: ['country', 'city', 'street_address'],
    });

    const payload: JwtPayload = {
      sub: user.user_id,
      username: user.username,
      email: user.email,
      role: userRole.role_name,
      role_id: user.role_id,
    };

    return {
      access_token: this.jwtService.sign(payload),
      user: {
        user_id: user.user_id,
        username: user.username,
        email: user.email,
        first_name: user.first_name,
        last_name: user.last_name,
        phone: user.phone,
        role: userRole.role_name,
        role_id: user.role_id,
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
        country: userAddress?.country || null,
        city: userAddress?.city || null,
        street_address: userAddress?.street_address || null,
      },
    };
  }

  async getProfile(userId: string): Promise<any> {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é
    const user = await this.userRepository.findOne({
      where: { user_id: userId },
      relations: ['role'],
      select: [
        'user_id',
        'username',
        'email',
        'first_name',
        'last_name',
        'phone',
        'role_id',
        'created_at',
        'last_login',
      ],
    });

    if (!user) {
      throw new UnauthorizedException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userRole = await this.userRoleRepository.findOne({
      where: { role_id: user.role_id },
    });

    // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã user_addresses
    const userAddress = await this.userAddressRepository.findOne({
      where: { user_id: userId },
      order: { created_at: 'DESC' },
      select: ['country', 'city', 'street_address'],
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const profile = {
      user_id: user.user_id,
      username: user.username,
      email: user.email,
      first_name: user.first_name,
      last_name: user.last_name,
      phone: user.phone,
      role_id: user.role_id,
      role: userRole?.role_name || 'guest',
      created_at: user.created_at,
      last_login: user.last_login,
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      country: userAddress?.country || null,
      city: userAddress?.city || null,
      street_address: userAddress?.street_address || null,
    };

    console.log('üìã –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', profile);
    return profile;
  }

  async register(registerDto: RegisterDto): Promise<RegisterResponseDto> {
    const { username, email, password, first_name, last_name, phone } = registerDto;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å username
    const existingUserByUsername = await this.userRepository.findOne({
      where: { username },
    });

    if (existingUserByUsername) {
      throw new ConflictException('Username —É–∂–µ –∑–∞–Ω—è—Ç');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å email
    const existingUserByEmail = await this.userRepository.findOne({
      where: { email },
    });

    if (existingUserByEmail) {
      throw new ConflictException('Email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å "user" (role_id = 3 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    const userRole = await this.userRoleRepository.findOne({
      where: { role_name: 'user' },
    });

    if (!userRole) {
      throw new BadRequestException('–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å (12 rounds bcrypt)
    const saltRounds = 12;
    const password_hash = await bcrypt.hash(password, saltRounds);

    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const newUser = this.userRepository.create({
      username,
      email,
      password_hash,
      first_name,
      last_name,
      phone: phone || null,
      role_id: userRole.role_id, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é user (role_id = 3)
    });

    try {
      const savedUser = await this.userRepository.save(newUser);

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –±–µ–∑ JWT —Ç–æ–∫–µ–Ω–∞
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–æ–π—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ /auth/login
      return {
        status: 'success',
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.',
        user: {
          user_id: savedUser.user_id,
          username: savedUser.username,
          email: savedUser.email,
          first_name: savedUser.first_name,
          last_name: savedUser.last_name,
          role: userRole.role_name,
          role_id: savedUser.role_id,
        },
        created_at: savedUser.created_at.toISOString(),
      };
    } catch (error) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      if (error.code === '23505') {
        // PostgreSQL unique violation
        if (error.detail.includes('username')) {
          throw new ConflictException('Username —É–∂–µ –∑–∞–Ω—è—Ç');
        }
        if (error.detail.includes('email')) {
          throw new ConflictException('Email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
        }
      }
      throw new BadRequestException('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
  }

  async getUserDatabaseRole(role: string): Promise<string> {
    // –ú–∞–ø–ø–∏–Ω–≥ —Ä–æ–ª–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫ —Ä–æ–ª—è–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const roleMapping = {
      admin: 'restaurant_admin',
      manager: 'restaurant_manager',
      user: 'restaurant_user',
      guest: 'restaurant_guest',
    };

    return roleMapping[role] || 'restaurant_guest';
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
   * –í—ã–∑—ã–≤–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ —É—Ä–æ–≤–Ω–µ –ë–î `update_user_profile_transactional`.
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è.
   */
  async updateProfile(userId: string, dto: UpdateProfileDto): Promise<any> {
    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ë–î —á–µ—Ä–µ–∑ raw query —Å DEFAULT –¥–ª—è –Ω–µ—É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
    const result = await this.userRepository.query(
      `SELECT update_user_profile_transactional(
        $1::uuid, 
        $2::text, 
        $3::text, 
        $4::text, 
        $5::text, 
        $6::text, 
        $7::text, 
        NULL::text
      ) as res`,
      [
        userId, 
        dto.first_name || null,
        dto.last_name || null,
        dto.phone || null,
        dto.country || null,
        dto.city || null,
        dto.street_address || null
      ],
    );

    return result[0]?.res || null;
  }

  /**
   * –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å, —Ö–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∏ –≤—ã–∑—ã–≤–∞–µ–º updateProfile –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î.
   */
  async changePassword(userId: string, dto: ChangePasswordDto): Promise<any> {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ö—ç—à–µ–º
    const user = await this.userRepository.findOne({ where: { user_id: userId } });
    if (!user) throw new UnauthorizedException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

    const match = await bcrypt.compare(dto.current_password, user.password_hash);
    if (!match) throw new BadRequestException('–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π');

    const saltRounds = 12;
    const newHash = await bcrypt.hash(dto.new_password, saltRounds);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º update_user_profile_transactional –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è password_hash
    const result = await this.userRepository.query(
      `SELECT update_user_profile_transactional(
        $1::uuid, 
        NULL::text, 
        NULL::text, 
        NULL::text, 
        NULL::text, 
        NULL::text, 
        NULL::text, 
        $2::text
      ) as res`,
      [userId, newHash],
    );

    return result[0]?.res || null;
  }

  async getAllUsers() {
    const users = await this.userRepository.find({
      relations: ['role'],
      select: [
        'user_id',
        'username',
        'email',
        'first_name',
        'last_name',
        'phone',
        'role_id',
        'created_at',
        'last_login'
      ]
    });

    return users.map(user => ({
      user_id: user.user_id,
      username: user.username,
      email: user.email,
      first_name: user.first_name,
      last_name: user.last_name,
      phone: user.phone,
      role: user.role?.role_name || 'user',
      role_id: user.role_id,
      created_at: user.created_at,
      last_login: user.last_login
    }));
  }

  async createUser(createUserDto: CreateUserDto): Promise<any> {
    const { username, email, password, first_name, last_name, phone, role_id } = createUserDto;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å username
    const existingUserByUsername = await this.userRepository.findOne({
      where: { username },
    });

    if (existingUserByUsername) {
      throw new ConflictException('Username —É–∂–µ –∑–∞–Ω—è—Ç');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å email
    const existingUserByEmail = await this.userRepository.findOne({
      where: { email },
    });

    if (existingUserByEmail) {
      throw new ConflictException('Email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–∏
    const userRole = await this.userRoleRepository.findOne({
      where: { role_id },
    });

    if (!userRole) {
      throw new BadRequestException('–£–∫–∞–∑–∞–Ω–Ω–∞—è —Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const saltRounds = 12;
    const password_hash = await bcrypt.hash(password, saltRounds);

    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const newUser = this.userRepository.create({
      username,
      email,
      password_hash,
      first_name,
      last_name,
      phone: phone || null,
      role_id,
    });

    try {
      const savedUser = await this.userRepository.save(newUser);

      return {
        status: 'success',
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
        user: {
          user_id: savedUser.user_id,
          username: savedUser.username,
          email: savedUser.email,
          first_name: savedUser.first_name,
          last_name: savedUser.last_name,
          role: userRole.role_name,
          role_id: savedUser.role_id,
        },
        created_at: savedUser.created_at.toISOString(),
      };
    } catch (error) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      if (error.code === '23505') {
        // PostgreSQL unique violation
        if (error.detail.includes('username')) {
          throw new ConflictException('Username —É–∂–µ –∑–∞–Ω—è—Ç');
        }
        if (error.detail.includes('email')) {
          throw new ConflictException('Email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
        }
      }
      throw new BadRequestException('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
  }

  async updateUser(userId: string, updateUserDto: UpdateUserDto): Promise<any> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await this.userRepository.findOne({
      where: { user_id: userId },
    });

    if (!user) {
      throw new BadRequestException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å username (–µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è)
    if (updateUserDto.username && updateUserDto.username !== user.username) {
      const existingUser = await this.userRepository.findOne({
        where: { username: updateUserDto.username },
      });
      if (existingUser) {
        throw new ConflictException('Username —É–∂–µ –∑–∞–Ω—è—Ç');
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å email (–µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è)
    if (updateUserDto.email && updateUserDto.email !== user.email) {
      const existingUser = await this.userRepository.findOne({
        where: { email: updateUserDto.email },
      });
      if (existingUser) {
        throw new ConflictException('Email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ (–µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è)
    if (updateUserDto.role_id && updateUserDto.role_id !== user.role_id) {
      const userRole = await this.userRoleRepository.findOne({
        where: { role_id: updateUserDto.role_id },
      });
      if (!userRole) {
        throw new BadRequestException('–£–∫–∞–∑–∞–Ω–Ω–∞—è —Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updateData: any = {};
    
    if (updateUserDto.username) updateData.username = updateUserDto.username;
    if (updateUserDto.email) updateData.email = updateUserDto.email;
    if (updateUserDto.first_name) updateData.first_name = updateUserDto.first_name;
    if (updateUserDto.last_name) updateData.last_name = updateUserDto.last_name;
    if (updateUserDto.phone !== undefined) updateData.phone = updateUserDto.phone || null;
    if (updateUserDto.role_id) updateData.role_id = updateUserDto.role_id;
    
    // –•–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
    if (updateUserDto.password) {
      const saltRounds = 12;
      updateData.password_hash = await bcrypt.hash(updateUserDto.password, saltRounds);
    }

    try {
      await this.userRepository.update(userId, updateData);

      return {
        status: 'success',
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω',
        updated_user_id: userId,
      };
    } catch (error) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      if (error.code === '23505') {
        // PostgreSQL unique violation
        if (error.detail.includes('username')) {
          throw new ConflictException('Username —É–∂–µ –∑–∞–Ω—è—Ç');
        }
        if (error.detail.includes('email')) {
          throw new ConflictException('Email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
        }
      }
      throw new BadRequestException('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
  }

  async deleteUser(userId: string): Promise<any> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await this.userRepository.findOne({
      where: { user_id: userId },
    });

    if (!user) {
      throw new BadRequestException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    try {
      await this.userRepository.delete(userId);

      return {
        status: 'success',
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω',
        deleted_user_id: userId,
      };
    } catch (error) {
      throw new BadRequestException('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
  }
}
